// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/redacted.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedactedClient is the client API for Redacted service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedactedClient interface {
	CreateRedacted(ctx context.Context, in *CreateRedactedRequest, opts ...grpc.CallOption) (*CreateRedactedResponse, error)
	DeleteRedacted(ctx context.Context, in *DeleteRedactedRequest, opts ...grpc.CallOption) (*DeleteRedactedResponse, error)
}

type redactedClient struct {
	cc grpc.ClientConnInterface
}

func NewRedactedClient(cc grpc.ClientConnInterface) RedactedClient {
	return &redactedClient{cc}
}

func (c *redactedClient) CreateRedacted(ctx context.Context, in *CreateRedactedRequest, opts ...grpc.CallOption) (*CreateRedactedResponse, error) {
	out := new(CreateRedactedResponse)
	err := c.cc.Invoke(ctx, "/proto.Redacted/CreateRedacted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redactedClient) DeleteRedacted(ctx context.Context, in *DeleteRedactedRequest, opts ...grpc.CallOption) (*DeleteRedactedResponse, error) {
	out := new(DeleteRedactedResponse)
	err := c.cc.Invoke(ctx, "/proto.Redacted/DeleteRedacted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedactedServer is the server API for Redacted service.
// All implementations must embed UnimplementedRedactedServer
// for forward compatibility
type RedactedServer interface {
	CreateRedacted(context.Context, *CreateRedactedRequest) (*CreateRedactedResponse, error)
	DeleteRedacted(context.Context, *DeleteRedactedRequest) (*DeleteRedactedResponse, error)
	mustEmbedUnimplementedRedactedServer()
}

// UnimplementedRedactedServer must be embedded to have forward compatible implementations.
type UnimplementedRedactedServer struct {
}

func (UnimplementedRedactedServer) CreateRedacted(context.Context, *CreateRedactedRequest) (*CreateRedactedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRedacted not implemented")
}
func (UnimplementedRedactedServer) DeleteRedacted(context.Context, *DeleteRedactedRequest) (*DeleteRedactedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRedacted not implemented")
}
func (UnimplementedRedactedServer) mustEmbedUnimplementedRedactedServer() {}

// UnsafeRedactedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedactedServer will
// result in compilation errors.
type UnsafeRedactedServer interface {
	mustEmbedUnimplementedRedactedServer()
}

func RegisterRedactedServer(s grpc.ServiceRegistrar, srv RedactedServer) {
	s.RegisterService(&Redacted_ServiceDesc, srv)
}

func _Redacted_CreateRedacted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRedactedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedactedServer).CreateRedacted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Redacted/CreateRedacted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedactedServer).CreateRedacted(ctx, req.(*CreateRedactedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Redacted_DeleteRedacted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRedactedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedactedServer).DeleteRedacted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Redacted/DeleteRedacted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedactedServer).DeleteRedacted(ctx, req.(*DeleteRedactedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Redacted_ServiceDesc is the grpc.ServiceDesc for Redacted service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Redacted_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Redacted",
	HandlerType: (*RedactedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRedacted",
			Handler:    _Redacted_CreateRedacted_Handler,
		},
		{
			MethodName: "DeleteRedacted",
			Handler:    _Redacted_DeleteRedacted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/redacted.proto",
}
